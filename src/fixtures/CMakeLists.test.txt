set(RELATIVE_PATH "")
include(auto.cmake)

get_filename_component(PWD ./ ABSOLUTE)
string(REPLACE "${LIBGEODECOMP_SOURCE_DIR}" "" RELATIVE_PATH ${PWD})
string(REPLACE "/" _ BUFFER1 ${RELATIVE_PATH})
string(REPLACE ":" _ BUFFER2 ${BUFFER1})
set(UNIT_TEST_EXE test_${BUFFER2})
set(RUN_UNIT_TEST run_${BUFFER2})

get_filename_component(DIRNAME ${PWD} NAME)
string(REGEX MATCH "^parallel_mpi" is_mpi_test ${DIRNAME})
string(REGEX MATCH "^unit" is_unit_test ${DIRNAME})

# check if config enabled this test class
set(allowed_test false)
if (is_unit_test AND LIBGEODECOMP_FEATURE_UNIT)
  set(allowed_test true)
  add_custom_target(${RUN_UNIT_TEST} echo "running tests in..." && pwd && ./test)
endif(is_unit_test AND LIBGEODECOMP_FEATURE_UNIT)

if (is_mpi_test AND LIBGEODECOMP_FEATURE_MPI)
  set(allowed_test true)
  string(REPLACE "parallel_mpi_" "" NUM_PROC ${DIRNAME})
  add_custom_target(${RUN_UNIT_TEST} echo "running tests in..." && pwd && ${MPIEXEC} -np ${NUM_PROC} ./test)
endif(is_mpi_test AND LIBGEODECOMP_FEATURE_MPI)

# check whether LIMIT_TESTS selected the test, too
set(selected_test true)
if (LIMIT_TESTS)
  string(REGEX MATCH ${LIMIT_TESTS} selected_test ${RELATIVE_PATH})
endif (LIMIT_TESTS)

if(allowed_test AND selected_test)
  include_directories(${LIBGEODECOMP_SOURCE_DIR}/../lib/cxxtest)
  add_executable(${UNIT_TEST_EXE} ${SOURCES})
  set_target_properties(${UNIT_TEST_EXE} PROPERTIES OUTPUT_NAME test)
  target_link_libraries(${UNIT_TEST_EXE} ${LOCAL_LIBGEODECOMP_LINK_LIB})

  add_dependencies(test ${RUN_UNIT_TEST})
  add_dependencies(${RUN_UNIT_TEST} ${UNIT_TEST_EXE})
endif(allowed_test AND selected_test)
