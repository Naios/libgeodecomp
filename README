ABOUT
=====

LibGeoDecomp (Library for Geometric Decomposition codes) is a generic
library for stencil codes. Users can build custom computer simulations
(e.g. engineering or natural sciences problems) by encapsulating their
model in a C++ class. This class is then supplied to the library as a
template parameter. The library essentially relieves the user from the
pains of parallel programming, but is limited to applications which
perform space- and time-discrete simulations with only local
interactions.

Its modular architecture makes it applicable to various architectures
(e.g. multi core CPUs, GPUs, MPI clusters). For more details and a
user guide see http://www.libgeodecomp.org

BUILDING
========

For compiling LibGeoDecomp you'll need cmake (http://www.cmake.org) installed.
We recommend an out-of-source build:

  BUILD_DIR=build/`uname -ms | sed s/\ /-/g`
  mkdir -p $BUILD_DIR
  cd $BUILD_DIR
  cmake ../../src/
  make 

That's it. CMake will output a number of configure options. You can
change these by specifying their valued via "-D NAME=value". Note that
CMake will cache these settings, you don't have to specify them again
when re-running CMake. The following example turns CUDA support off.
This may come in handy in case CMake detected CUDA, but you don't have
a compatible GPU installed:

  cmake -D FEATURE_CUDA=false ../../src/

Another common option is to manually specify the compiler. Here I
select GCC 4.7.0 my Gentoo system, which would otherwise use GCC 4.5.3
as the standard compiler:

  cmake -D CMAKE_CXX_COMPILER=/usr/x86_64-pc-linux-gnu/gcc-bin/4.7.0/g++ ../../src/

Additionally you may want to run the library's unit tests via "make
test" to ensure that it's actually working. For speedier builds you
may want to run make in parallel, e.g. "make -j 4". Replace the 4 by
the number of cores in your system. For more details please refer to:

  http://www.libgeodecomp.org/documentation.html#userguide and
  http://www.libgeodecomp.org/faq.html
