#!/usr/bin/ruby
# -*- coding: utf-8 -*-
require 'fileutils'
require 'optparse'
require 'ostruct'
require 'pathname'
require 'pp'
require 'set'
require 'yaml'

@opts = OpenStruct.new

#####################
# UTILITY FUNCTIONS #
#####################

def pp_s(*objs)
  s = StringIO.new
  objs.each {|obj| PP.pp(obj, s) }
  s.rewind
  s.read
end

# sets a member only if previously undefined
def @opts.supplement(name, value)
  if !respond_to?(name)
    puts "Detected #{name} = #{value}"
    new_ostruct_member(name)
    send((name.to_s + "=").to_sym, value)
  end
end

def @opts.table
  @table
end

def package_name
  "LibGeoDecomp"
end

def cflags
  ret = "-O2 -Wall -Werror -Wno-sign-compare"
  if @opts.build_type == "Debug"
    ret = "-g -fno-inline -fno-default-inline -finline-limit=1" 
  end

  return ret
end

def set_gnu_make_opts
  num_proc = `grep "^processor.*\: " /proc/cpuinfo  | wc -l`.to_i 
  @opts.make = "make"
  @opts.makeopts = "-j#{num_proc + 1}"
end

def set_codegear_make_opts
  @opts.make = "make"
  @opts.makeopts = ""
end

def set_nmake_opts
  @opts.make = "nmake"
  @opts.makeopts = ""
end

def download_boost_archive(url, archive)
  if File.exist?(archive)
    `md5sum '#{archive}'` =~ /(\w+) .*/
    md5sum = $1
    if md5sum == "ec3875caeac8c52c7c129802a8483bd7"
      puts "  Skipping download"
      return 
    end
    FileUtils.rm archive
  end
  system "cd '#{archive.parent}' && wget '#{url}'"
end

def extract_boost_archive(archive, boost_sourcedir)
  if File.exists?(boost_sourcedir.parent)
    puts "  Skipping boost extraction"
    return
  end

  puts "  Extracting boost"
  FileUtils.rm_rf(boost_sourcedir.parent)
  system "cd '#{archive.parent}' && tar -xf '#{archive}'"
end

def copy_boost_libs(sourcedir, targetdir)
  puts "  Copying boost libraries"
  @opts.boost_libs.each do |lib|
    Dir.glob("#{sourcedir + lib}{,.hpp}").each do |f|
      lib_file = Pathname.new(f).relative_path_from(sourcedir)
      if File.exists?(targetdir + lib_file)
        puts "    Skipping #{lib_file}"
      end
      FileUtils.cp_r(f, targetdir)
    end
  end

end

def add_boost_libs
  return if @opts.boost_libs.empty?
  puts "Adding boost libs to build: #{pp_s(@opts.boost_libs)}"
  boost_targetdir = @opts.srcdir + "boost"
  boost_releasename = "boost_1_40_0"
  boost_filename = "#{boost_releasename}.tar.bz2"
  boost_url = "http://dfn.dl.sourceforge.net/project/boost/boost/1.40.0/#{boost_filename}"
  boost_archive = @opts.builddir.parent + boost_filename
  boost_sourcedir = @opts.builddir.parent + boost_releasename + "boost" 
  @opts.distclean_files += 
    [boost_archive,
     boost_sourcedir.parent,
     boost_targetdir]

  FileUtils.mkdir_p(boost_targetdir)
  download_boost_archive(boost_url, boost_archive)
  extract_boost_archive(boost_archive, boost_sourcedir)
  copy_boost_libs(boost_sourcedir, boost_targetdir)

  puts
end

def dump_options
  cmake_opts = ""
  config_header = <<EOF
#ifndef _libgeodecomp_config_h_
#define _libgeodecomp_config_h_
EOF

  cmake_opts += <<EOF
set(PACKAGE_NAME libgeodecomp)
set(CMAKE_BUILD_TYPE #{@opts.build_type})
set(CMAKE_INSTALL_PREFIX #{@opts.prefix})
set(LIB_LINKAGE_TYPE #{@opts.lib_linkage_type})
set(BOOST_LINK_SUFFIX #{@opts.boost_link_suffix})
EOF

  if @opts.cflags
    cmake_opts += <<EOF
set(CMAKE_C_FLAGS   "#{@opts.cflags} ${CMAKE_C_FLAGS}")
set(CMAKE_CXX_FLAGS "#{@opts.cflags} ${CMAKE_CXX_FLAGS}")
EOF
  end

  if @opts.allowed_tests[:unit]
    cmake_opts += <<EOF
set(LIBGEODECOMP_FEATURE_UNIT true)
EOF
  end

  if @opts.mpi
    cmake_opts += <<EOF
set(LIBGEODECOMP_FEATURE_MPI true)
set(CMAKE_C_COMPILER   #{@opts.mpiprefix}/bin/mpicc)
set(CMAKE_CXX_COMPILER #{@opts.mpiprefix}/bin/mpic++)
EOF
    config_header += <<EOF
#define LIBGEODECOMP_FEATURE_MPI
EOF
  end

  if @opts.opencl
    cmake_opts += <<EOF
set(LIBGEODECOMP_FEATURE_OPENCL true)
EOF
    config_header += <<EOF
#define LIBGEODECOMP_FEATURE_OPENCL
EOF
  end

  if @opts.cell
    cmake_opts += <<EOF
set(LIBGEODECOMP_FEATURE_CELL true)
EOF
    config_header += <<EOF
#define LIBGEODECOMP_FEATURE_CELL
EOF
  end

  if @opts.verbose
    cmake_opts += <<EOF
set(CMAKE_VERBOSE_MAKEFILE true)
EOF
  end

  config_header += <<EOF
#endif
EOF

  @opts.include_dirs.each do |dir|
    cmake_opts += <<EOF
include_directories("#{dir}")
EOF
  end

  @opts.link_dirs.each do |dir|
    cmake_opts += <<EOF
link_directories("#{dir}")
EOF
  end

  cmake_opts += <<EOF
# packaging stuff
set(PACKAGE_NAME "#{package_name}")
set(PACKAGE_VERSION "$ENV{LIBGEODECOMP_VERSION}")
if(NOT PACKAGE_VERSION)
  set(PACKAGE_VERSION "0.0.1")
endif(NOT PACKAGE_VERSION)

set(PACKAGE_VENDOR "Chair for Computer Science 3, FAU Erlangen, Germany")
set(PACKAGE_HOMEPAGE "http:\\\\\\\\www.libgeodecomp.org")
set(PACKAGE_EMAIL "users@libgeodecomp.org")

# installer stuff
set(CPACK_PACKAGE_NAME ${PACKAGE_NAME})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${PACKAGE_NAME})
set(CPACK_PACKAGE_VERSION ${PACKAGE_VERSION})
set(CPACK_PACKAGE_INSTALL_DIRECTORY ${PACKAGE_NAME})

# will be shown e.g. in windows' control center package info
set(CPACK_PACKAGE_VENDOR ${PACKAGE_VENDOR})
set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../README")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/../LICENSE")
set(CPACK_PACKAGE_INSTALL_DIRECTORY ${PACKAGE_NAME})

if(WIN32 AND NOT UNIX)
  # unused in current nsis versions, fix pending (http://www.cmake.org/Bug/print_bug_page.php?bug_id=8682)
  set(CPACK_NSIS_DISPLAY_NAME ${PACKAGE_NAME})

  # name to show in software tab of control center
  set(CPACK_NSIS_DISPLAY_NAME ${PACKAGE_NAME})
  # will be shown e.g. in windows' control center package info
  set(CPACK_NSIS_HELP_LINK ${PACKAGE_HOMEPAGE})
  # will be shown e.g. in windows' control center package info  
  set(CPACK_NSIS_URL_INFO_ABOUT ${PACKAGE_HOMEPAGE})
  # will be shown e.g. in windows' control center package info
  set(CPACK_NSIS_CONTACT ${PACKAGE_EMAIL})
  set(CPACK_NSIS_MODIFY_PATH ON)

  # There is a bug in NSI that does not handle full unix paths properly. Make
  # sure there is at least one set of four (4) backlasshes.
  set(CPACK_PACKAGE_ICON             "${CMake_SOURCE_DIR}/..\\\\libgeodecomp_icon.png")
  set(CPACK_NSIS_INSTALLED_ICON_NAME "${CMake_SOURCE_DIR}/..\\\\libgeodecomp_icon.png")
# further options:
#else(WIN32 AND NOT UNIX)
#  set(CPACK_STRIP_FILES "bin/MyExecutable")
#  set(CPACK_SOURCE_STRIP_FILES "")
#  set(CPACK_PACKAGE_EXECUTABLES "helloworld" "My Hello World")
endif(WIN32 AND NOT UNIX)

include(CPack)
EOF

  File.open(@opts.srcdir + "libgeodecomp" + "config.h", "w") do |f|
    f.write(config_header)
  end

  File.open(@opts.srcdir + "conf.cmake", "w") do |f|
    f.write(cmake_opts)
  end

  File.open(@opts.srcdir.parent + "conf.yaml", "w") do |f|
    f.write(YAML.dump(@opts))
  end
end

def set_platform_profile(profile)
  puts "Setting platform profile #{profile.to_s}"

  case profile
  when :codegear
    @opts.supplement(:cflags, nil)
    @opts.lib_linkage_type = "STATIC"
    @opts.typemaps = false
    @opts.mpi = false
    @opts.cmake = "cmake -G'Borland Makefiles'"
    @opts.allowed_tests[:unit] = false
    @opts.boost_libs += ["multi_array"]
    @opts.boost_link_suffix = "-bcb"
    puts "Warning: assuming CodeGear RAD Studio at c:/Programme/CodeGear/RAD Studio/6.0 with Boost 1.35 installed. Adjust include and link dirs if otherwise."
    @opts.include_dirs += ["c:/Programme/CodeGear/RAD Studio/6.0/include/boost_1_35"]
    @opts.link_dirs    += ["c:/Programme/CodeGear/RAD Studio/6.0/lib"]
    set_codegear_make_opts

  when :nmake
    @opts.supplement(:cflags, nil)
    @opts.lib_linkage_type = "STATIC"
    @opts.typemaps = false
    @opts.mpi = false
    @opts.cmake = "cmake -G'NMake Makefiles'"
    @opts.boost_link_suffix = "-vc90-mt-1_40"
    puts "Warning: Be sure that boost include and library directories are set, e.g. via"
    puts "#{$0} --include 'c:/Dokumente\ und\ Einstellungen/gentryx/Eigene\ Dateien/boost_1_40_0' \\"
    puts " --link 'c:/Dokumente\ und\ Einstellungen/gentryx/Eigene\ Dateien/boost_1_40_0/lib'"
    puts "Warning: Assuming Boost 1.40 compiled with Visual C++ 9.0. Adjust boost-link-suffix if otherwise."
    set_nmake_opts

  when :gnumake
    # intentionally left blank, defaults should suffice
  end

  puts
end

def print_report
  puts "Configured with the following options"
  puts "-------------------------------------"
  puts
  puts "Prefix:     #{@opts.prefix}"
  puts "Linkage:    #{@opts.lib_linkage_type}"
  puts "Build type: #{@opts.build_type}"
  puts "MPI:        #{@opts.mpi}"
  puts "MPI prefix: #{@opts.mpiprefix.to_s}" if @opts.mpi
  puts "OpenCL:     #{@opts.opencl ? 'yes' : 'no'}"
  puts "Typemaps:   #{@opts.typemaps}"
  allowed_tests = 
    @opts.allowed_tests.keys.find_all { |key| @opts.allowed_tests[key] }
  allowed_tests.map! { |test| test.to_s }
  puts "Tests:      #{pp_s(allowed_tests)}"
  puts "Make:       #{@opts.make}"
  puts "Makeopts:   #{pp_s(@opts.makeopts)}"
  puts "Cflags:     #{@opts.cflags}"
end

##################
# MAIN FUNCTIONS #
##################

def init_default_options
  # fixed settings:
  dir = Pathname.new(__FILE__).parent
  dir = Pathname.new(FileUtils.pwd) + dir if dir.relative?
  arch = `uname -ms`.chomp.gsub(/ /, '-')
  @opts.srcdir = dir + "src"
  @opts.builddir = dir + "build" + arch
  @opts.cxxtestdir = dir + "lib" + "cxxtest"
  @opts.package_namespace = package_name
  
  %w{cmake cpack doxygen}.each do |p|
    print "Checking for #{p}... "
    system "#{p} --version >/dev/null"
    if $?.success?
      puts "OK"
    else
      puts "FAILED"
      raise "Could not find #{p}"
    end
  end
  puts

  @opts.cmake = "cmake"
  @opts.doxygen = "doxygen"

  # configurable options:
  @opts.boost_libs = []
  @opts.distclean_files = []
  @opts.include_dirs = []
  @opts.link_dirs = []
  @opts.allowed_tests = { }
end

def read_commandline_options
  parser = OptionParser.new do |o|
    o.banner = "Usage: #$0 PARAMS"
    o.separator "Configure build options with the following parameters:"
    
    o.on("--prefix DIR", 
         "Install relative to DIR.") do |prefix|
      @opts.prefix = prefix
    end
    
    o.on("--cmake COMMAND", 
         "Use COMMAND to call CMake.") do |cmake|
      @opts.cmake = cmake
    end
    
    o.on("-v", "--verbose", 
         "Give debugging information during build.") do 
      @opts.verbose = true
    end

    o.on("--mpi-prefix DIR", 
         "Use the MPI installation located in DIR.") do |prefix|
      @opts.mpiprefix = Pathname.new(prefix)
    end

    o.on("--[no-]typemaps", 
         "Control MPI typemap generation.") do |f|
      @opts.typemaps = f
    end

    o.on("--[no-]mpi", 
         "Control MPI support.") do |f|
      @opts.mpi = f
    end

    o.on("--[no-]opencl", 
         "Build/disable OpenCL components.") do |f|
      @opts.opencl = f
    end

    o.on("--[no-]cell", 
         "Set whether Cell BE specific modules are built..") do |f|
      @opts.cell = f
    end

    o.on("--linkage-type TYPE", ["shared", "static", "SHARED", "STATIC"],
         "Set the library's linkage type (shared or static).") do |linkage|
      @opts.lib_linkage_type = linkage.upcase
    end

    o.on("--cflags CFLAGS",
         "Compiler flags to pass on to the C/C++ compilers.") do |new_cflags|
      @opts.cflags = new_cflags
    end

    o.on("--boost-libs LIB[,LIB...]", Array,
         "Add the given boost (header-only) libraries to the build.") do |libraries|
      @opts.boost_libs = libraries
    end

    o.on("--boost-link-suffix SUFFIX",
         "Add the given SUFFIX to all boost library names to link",
         "against.") do |suffix|
      @opts.boost_link_suffix = suffix
    end

    o.on("--include DIR[,DIR...]", Array,
         "Add DIR to the include path. Useful when required",
         "libraries (e.g. boost) are located outside the default",
         "paths.") do |paths|
      @opts.include_dirs += paths
    end

    o.on("--lib DIR[,DIR...]", Array,
         "Add DIR to the link path. Useful when required",
         "libraries (e.g. boost) are located outside the default",
         "paths.") do |paths|
      @opts.link_dirs += paths
    end

    o.on("--enable-test TYPE[,TYPE...]", Array,
         "Add TYPE to the list of test types to be run (e.g. unit).") do |tests|
      tests.each { |t| @opts.allowed_tests[t.to_sym] = true }
    end

    o.on("--disable-test TYPE[,TYPE...]", Array,
         "Remove TYPE from the list of test types to be run (e.g. mpi).") do |tests|
      tests.each { |t| @opts.allowed_tests[t.to_sym] = false }
    end

    o.on("--platform-profile PROFILE", [:codegear, :nmake, :gnumake],
         "Guess options most suitable for the given build platform.",
         "Available profiles: codegear, nmake, gnumake.") do |profile|
      set_platform_profile profile
    end

    o.on("--build-type TYPE", ["Debug", "Release", "MinSizeRel", "RelWithDebInfo"],
         'Set the cmake build type (Debug, Release, MinSizeRel (short',
         'for "minimum size release"), RelWithDebInfo (short for',
         '"release with debug information")).') do |type|
      @opts.build_type = type
    end
  end
  parser.parse!(ARGV)
end

def find_opencl
  paths = ENV['CPLUS_INCLUDE_PATH'].nil? ? [] : ENV['CPLUS_INCLUDE_PATH'].split(":") 
  paths << "/usr/include"
  paths.each do |path|
    header = Pathname.new(path) + "CL" + "cl.h"
    return true if File.exist?(header)
  end

  return nil
end

# fill in options which are currently unspecified
def detect_defaults
  puts "Detecting defaults"
  puts "------------------"
  puts

  @opts.supplement(:cflags, cflags)

  # MPI related settings
  mpicc = `which mpicc 2>/dev/null`.chomp
  mpiprefix = ENV['OMPI_PREFIX'] 
  mpiprefix = Pathname.new(mpiprefix) if !mpiprefix.nil?
  mpiprefix ||= Pathname.new(mpicc).parent.parent if !mpicc.empty?
  @opts.supplement(:mpiprefix, mpiprefix)
  # If mpi-prefix is not set we have to switch off MPI support
  @opts.supplement(:mpi, @opts.mpiprefix != nil) 

  # MPI is required for typemaps to work
  @opts.supplement(:mpiexec, @opts.mpiprefix + "bin" + "mpiexec") if @opts.mpi
  @opts.supplement(:typemaps, @opts.mpi == true) 
  @opts.supplement(:opencl, find_opencl) 

  cpuinfo = `cat /proc/cpuinfo 2>/dev/null`
  @opts.supplement(:cell, cpuinfo =~ /Cell Broadband Engine/ ? true : false)


  if @opts.allowed_tests[:mpi].nil? && @opts.mpi
    @opts.allowed_tests[:mpi] = true 
  end

  if @opts.allowed_tests[:unit].nil?
    @opts.allowed_tests[:unit] = true 
  end

  @opts.supplement(:lib_linkage_type, "SHARED")
  @opts.supplement(:boost_link_suffix, "")
  @opts.supplement(:prefix, "/usr/local")
  @opts.supplement(:typemapsdir,
                   @opts.srcdir + "libgeodecomp" + "mpilayer")
  @opts.supplement(:verbose, false)
  @opts.supplement(:cmake, "cmake")
  @opts.supplement(:build_type, "Release")

  if @opts.make.nil?
    case `make -v 2>/dev/null`
    when /GNU Make/
      set_gnu_make_opts
    when /CodeGear/
      set_codegear_make_opts
    else
      if `nmake 2>/dev/null` =~ /Microsoft.*Program Maintenance Utility/
        set_nmake_opts
      end
    end
  end

  puts
end

def process_options
  add_boost_libs
  dump_options
  print_report
end

init_default_options
read_commandline_options
detect_defaults
process_options
